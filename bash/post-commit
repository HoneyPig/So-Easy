#!/usr/bin/expect -f

# POST-COMMIT HOOK
#
# The post-commit hook is invoked after a commit.  Subversion runs
# this hook by invoking a program (script, executable, binary, etc.)
# named 'post-commit' (for which this file is a template) with the 
# following ordered arguments:
#
#   [1] REPOS-PATH   (the path to this repository)
#   [2] REV          (the number of the revision just committed)
#
# The default working directory for the invocation is undefined, so
# the program should set one explicitly if it cares.
#
# Because the commit has already completed and cannot be undone,
# the exit code of the hook program is ignored.  The hook program
# can use the 'svnlook' utility to help it examine the
# newly-committed tree.
#
# On a Unix system, the normal procedure is to have 'post-commit'
# invoke other programs to do the real work, though it may do the
# work itself too.
#
# Note that 'post-commit' must be executable by the user(s) who will
# invoke it (typically the user httpd runs as), and that user must
# have filesystem-level permission to access the repository.
#
# On a Windows system, you should name the hook program
# 'post-commit.bat' or 'post-commit.exe',
# but the basic idea is the same.
# 
# The hook program typically does not inherit the environment of
# its parent process.  For example, a common problem is for the
# PATH environment variable to not be set to its usual value, so
# that subprograms fail to launch unless invoked via absolute path.
# If you're having unexpected problems with a hook program, the
# culprit may be unusual (or missing) environment variables.
# 
# Here is an example hook script, for a Unix /bin/sh interpreter.
# For more examples and pre-written hooks, see those in
# the Subversion repository at
# http://svn.apache.org/repos/asf/subversion/trunk/tools/hook-scripts/ and
# http://svn.apache.org/repos/asf/subversion/trunk/contrib/hook-scripts/


#REPOS="$1"
#REV="$2"

set REPOS [lindex $argv 0]
set REV [lindex $argv 1]

set WEBHOST XXX.XXX.XXX.XXX
set WEBUSER root
set WEBPASS XXXXXXXXXXXXXX

set WC /var/www/html/xxx/
set SVNBIN /usr/bin/svn
set timeout 30

set E_NO_SSH 1 ;# can't find a usable SSH on our system
set E_NO_CONNECT 2 ;# failure to connect to remote server (timed out)
set E_WRONG_PASS 3 ;# password provided does not work
set E_UNKNOWN 25 ;# unexpected failure
set SSHBIN /usr/bin/ssh

spawn $SSHBIN $WEBUSER@$WEBHOST "$SVNBIN update -r HEAD --force $WC"
expect {
    "continue connecting (yes/no)? " { send "yes\r"; exp_continue; }
    -nocase "password:" { send "$WEBPASS\r"; }
    timeout {
        send_error "\nWe have timed out after $timeout seconds while trying to connect to $HOST!\n";
        exit $E_NO_CONNECT;
    }
}

expect {
        -nocase "password:" { ;# if we are asked for the password again, then we have provided the wrong password
                send_error "\nCan not log in to $WEBHOST because the password provided for user $USER has been rejected.\n";
                exit $E_WRONG_PASS;
        }
        -re "revision (\[0-9]+)." {
                if {$REV == $expect_out(1,string)} {
                        send_user "\nSuccessfully updated $WC on $WEBHOST to revision $REV.\n"
                } else {
                        send_user "\nUpdated repository to revision $expect_out(1,string), but svn reports that we are at revision number $REV.\n"
                        send_error "CAUTION: Repository updated to revision $expect_out(1,string), but committed revision $REV.\n"
                }
        }
}



#mailer.py commit "$REPOS" "$REV" /path/to/mailer.conf